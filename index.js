// === ElleBot ‚Äî TH/VI sassy + dark humor (Webhook, no 409) ===
const express = require("express");
const TelegramBot = require("node-telegram-bot-api");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// ----- ENV -----
const TOKEN = process.env.TELEGRAM_TOKEN;
const PUBLIC_URL = process.env.PUBLIC_URL; // e.g. https://ellebot.onrender.com
const GEMINI_KEY = process.env.GEMINI_API_KEY;
if (!TOKEN) { console.error("‚ùå Missing TELEGRAM_TOKEN"); process.exit(1); }
if (!PUBLIC_URL) { console.error("‚ùå Missing PUBLIC_URL"); process.exit(1); }
if (!GEMINI_KEY) { console.error("‚ùå Missing GEMINI_API_KEY"); process.exit(1); }

// ----- Web server (Render health + Webhook) -----
const app = express();
app.use(express.json());
const PORT = process.env.PORT || 10000;

// Create bot WITHOUT polling (webhook mode)
const bot = new TelegramBot(TOKEN, { polling: false });

// Webhook endpoint
app.post(`/webhook/${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Set webhook on boot
(async () => {
  try {
    const url = `${PUBLIC_URL}/webhook/${TOKEN}`;
    await bot.setWebHook(url);
    console.log("‚úÖ Webhook set:", url);
  } catch (e) {
    console.error("‚ùå setWebHook failed:", e?.message || e);
    process.exit(1);
  }
})();

app.get("/", (_, res) => res.send("ElleBot TH/VI is live üíÖüñ§"));
app.listen(PORT, () => console.log(`HTTP on ${PORT}`));

// ----- Gemini -----
const genAI = new GoogleGenerativeAI(GEMINI_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// ----- Lang mode: 'auto' | 'th' | 'vi' -----
let langMode = "auto";

// tiny rate-limit + retry (prevents quota bursts)
const RATE_LIMIT_MS = 1500;
let lastCall = 0;
const sleep = (ms) => new Promise(r => setTimeout(r, ms));
async function withRateLimit() {
  const wait = Math.max(0, RATE_LIMIT_MS - (Date.now() - lastCall));
  if (wait) await sleep(wait);
  lastCall = Date.now();
}

// quick VI detector
function looksVietnamese(s = "") {
  return /[ƒÉ√¢ƒë√™√¥∆°∆∞√°√†·∫£√£·∫°·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑√©√®·∫ª·∫Ω·∫π·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµ]/i.test(s);
}

// Persona prompt
function buildPrompt(text, user, langSel) {
  const lang = langSel === "auto" ? (looksVietnamese(text) ? "vi" : "th") : langSel;

  const base = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "ElleBot" ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å glam, ‡πÄ‡∏£‡∏¥‡πà‡∏î ‡∏î‡∏≤‡∏£‡πå‡∏Å ‡∏ï‡∏•‡∏Å ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏ß‡∏™‡∏≤‡∏¢‡∏°‡∏±‡πà‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏≤‡∏ö‡∏Ñ‡∏≤‡∏¢/‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏ã‡∏ß‡πÑ‡∏î‡πâ‡∏Å‡∏ß‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢
- ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏≠‡∏î‡∏°‡∏∏‡∏Å‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á
`;

  const thTone = `
‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤: ‡πÑ‡∏ó‡∏¢‡∏•‡πâ‡∏ß‡∏ô ‡πÇ‡∏ó‡∏ô‡∏°‡∏±‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ï‡πà‡πÄ‡∏≠‡πá‡∏ô‡∏î‡∏π ‡πÄ‡∏ä‡πà‡∏ô "‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å", "‡πÅ‡∏°‡πà‡∏ß‡πà‡∏≤", "‡∏•‡∏π‡∏Å‡∏à‡πã‡∏≤"
‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏¢‡∏≤‡∏ß‡πÜ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
`;
  const viTone = `
Ng√¥n ng·ªØ: ti·∫øng Vi·ªát t·ª± tin, m·∫∑n m√†, ch√¢m bi·∫øm nh·∫π, ki·ªÉu "ch·ªã ƒë·∫πp/ em iu".
Tr√°nh d√πng ti·∫øng Anh kh√¥ng c·∫ßn thi·∫øt.
`;

  const inst = lang === "vi" ? viTone : thTone;

  return `
${base}
${inst}
T√™n ng∆∞·ªùi d√πng/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user || "-"}
C√¢u h·ªèi/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${text}

H√£y/‡πÇ‡∏õ‡∏£‡∏î ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1‚Äì2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏ï‡∏≤‡∏°‡πÇ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:`;
}

// Gemini call with retry/backoff
async function aiReply(msgText, name) {
  const MAX_RETRY = 3;
  let delay = 10_000;

  for (let i = 0; i < MAX_RETRY; i++) {
    try {
      await withRateLimit();
      const prompt = buildPrompt(msgText, name, langMode);
      const r = await model.generateContent(prompt);
      let out = (r.response.text() || "").trim();

      // keep it short + avoid random English paragraphs
      if (out.length > 180) out = out.slice(0, 180) + "‚Ä¶";
      if (/[a-zA-Z]{8,}/.test(out)) out = looksVietnamese(msgText) ? "N√≥i ti·∫øng Vi·ªát cho sang x·ªãn nh√© c∆∞ng üòò" : "‡∏Ç‡∏≠‡πÑ‡∏ó‡∏¢‡∏•‡πâ‡∏ß‡∏ô‡∏à‡πâ‡∏∞ ‡∏ï‡∏±‡∏ß‡πÅ‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏õ‡∏µ‡∏Ñ‡∏≠‡∏¥‡πä‡∏á‡∏¢‡∏≤‡∏ß ‡πÜ üòå";
      return out || (looksVietnamese(msgText) ? "N√≥i g√¨ r√µ h∆°n x√≠u coi, ch·ªã ƒë·∫πp nghe ch∆∞a? üòâ" : "‡∏û‡∏π‡∏î‡∏°‡∏≤‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î ‡πÅ‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¥‡∏ô‡πÄ‡∏•‡∏¢‡∏•‡∏π‡∏Å üòò");
    } catch (e) {
      const m = (e?.message || "").toLowerCase();
      const is429 = m.includes("429") || m.includes("quota") || m.includes("too many requests");
      if (is429 && i < MAX_RETRY - 1) {
        await sleep(delay);
        delay *= 2;
        continue;
      }
      return looksVietnamese(msgText)
        ? "Server ƒëang k·∫πt h√†ng ch√∫t x√≠u, ƒë·ª£i ch·ªã ƒë·∫πp th·ªü‡∏Å‡πà‡∏≠‡∏ô nha üòÆ‚Äçüí®"
        : "‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡πà‡∏ô‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á ‡∏£‡∏≠‡πÅ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÅ‡∏û‡πâ‡∏ö‡∏™‡πå üòÆ‚Äçüí®";
    }
  }
}

// ----- Commands -----
bot.onText(/^\/start$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    "üíÖ ElleBot ‡∏™‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏î TH/VI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏°‡∏≤‡∏ó‡πå\n/ask ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Äî ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÅ‡∏°‡πà‡∏à‡∏¥‡∏Å‡∏ï‡∏≠‡∏ö\n/lang th|vi|auto ‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: " + langMode + ")\n/ping ‚Äî ‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏µ‡∏û‡∏à‡∏£"
  );
});
bot.onText(/^\/ping$/, (msg) => bot.sendMessage(msg.chat.id, "‡∏¢‡∏±‡∏á‡∏™‡∏ß‡∏¢ ‡∏¢‡∏±‡∏á‡∏ã‡πà‡∏≤‡∏™‡πå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏¢‡∏Ñ‡πà‡∏∞ ‚ö°"));

bot.onText(/^\/lang\s+(th|vi|auto)$/i, (msg, m) => {
  langMode = m[1].toLowerCase();
  const text =
    langMode === "vi"
      ? "ƒê√£ chuy·ªÉn qua ti·∫øng Vi·ªát. L√™n ƒë·ªì ƒëi em iu üíã"
      : langMode === "th"
      ? "‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ï‡∏±‡∏ß‡πÅ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡πÄ‡∏ï‡∏à üíã"
      : "‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏à‡πâ‡∏≤ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏´‡∏ô ‡πÅ‡∏°‡πà‡∏Å‡πá‡∏≠‡∏≠‡∏Å‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ô‡∏±‡πâ‡∏ô üíÖ";
  bot.sendMessage(msg.chat.id, text);
});

bot.onText(/^\/ask\s+([\s\S]+)$/i, async (msg, m) => {
  const q = (m && m[1])?.trim();
  if (!q) return bot.sendMessage(msg.chat.id, "‡∏û‡∏¥‡∏°‡∏û‡πå /ask ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏¥‡∏Ñ‡∏∞‡∏•‡∏π‡∏Å üòò");
  const ans = await aiReply(q, msg.from.first_name);
  bot.sendMessage(msg.chat.id, `üñ§ ${ans}`);
});

// fallback for any text
bot.on("message", async (msg) => {
  if (!msg.text || msg.text.startsWith("/")) return;
  const ans = await aiReply(msg.text, msg.from.first_name);
  bot.sendMessage(msg.chat.id, `üñ§ ${ans}`);
});



