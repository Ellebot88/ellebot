// === ElleBot x Gemini ‚Äî Thai-only, short & sassy + Quota-safe ===
const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// ENV
const token = process.env.TELEGRAM_TOKEN;
const geminiKey = process.env.GEMINI_API_KEY;
if (!token) { console.error("‚ùå Missing TELEGRAM_TOKEN"); process.exit(1); }
if (!geminiKey) { console.error("‚ùå Missing GEMINI_API_KEY"); process.exit(1); }

// Setup HTTP (Render health)
const app = express();
const PORT = process.env.PORT || 10000;
app.get("/", (_, res) => res.send("ElleBot (Thai-only, sassy) üñ§"));
app.listen(PORT, () => console.log(`HTTP server on ${PORT}`));

// Telegram + Gemini
const bot = new TelegramBot(token, { polling: true });
const genAI = new GoogleGenerativeAI(geminiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// ===== Rate limit & retry settings =====
const RATE_LIMIT_MS = 1500;       // ‡πÄ‡∏ß‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1.5 ‡∏ß‡∏¥/‡∏Ñ‡∏≥‡∏Ç‡∏≠
let lastCallAt = 0;

function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

async function withRateLimit() {
  const now = Date.now();
  const wait = Math.max(0, RATE_LIMIT_MS - (now - lastCallAt));
  if (wait > 0) await sleep(wait);
  lastCallAt = Date.now();
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‚Äú‡πÑ‡∏ó‡∏¢‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡∏ô‚Äù
function buildPrompt(userText, name) {
  return `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "ElleBot" ‡∏ö‡∏≠‡∏ó‡πÇ‡∏ó‡∏ô‡∏î‡∏≤‡∏£‡πå‡∏Å ‡∏Å‡∏ß‡∏ô ‡πÄ‡∏ó‡πà ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏• üñ§
‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:
- ‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏Å‡∏ß‡∏ô‡πÜ ‡πÅ‡∏ï‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
- ‡πÇ‡∏ó‡∏ô‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏¢‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${name || "‡∏Ñ‡∏∏‡∏ì"}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${userText}
‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ:`;
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢/backoff ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ 429
async function aiReply(text, name) {
  const fallback = [
    "‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á üòµ‚Äçüí´",
    "‡∏£‡∏≠‡∏â‡∏±‡∏ô‡∏´‡∏≤‡∏¢‡∏Æ‡∏≠‡∏ï‡πÅ‡∏õ‡πä‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ üòâ",
    "‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ô‡πà‡∏ô‡∏°‡∏≤‡∏Å ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ üñ§",
  ];

  const MAX_RETRIES = 3;
  let delay = 10_000; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      await withRateLimit();
      const result = await model.generateContent(buildPrompt(text, name));
      let out = (result.response.text() || "").trim();

      if (!out) out = "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏ó‡∏≥‡πÑ‡∏° ‡∏Å‡∏•‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡∏™‡∏¥ üòâ";
      if (out.length > 140) out = out.slice(0, 140) + "‚Ä¶";
      // ‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
      if (/[a-zA-Z]{3,}/.test(out)) out = "‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢ üòå";
      return out;
    } catch (err) {
      const msg = String(err?.message || err);
      const is429 =
        msg.includes("429") ||
        msg.toLowerCase().includes("quota") ||
        msg.toLowerCase().includes("too many requests");

      if (is429 && attempt < MAX_RETRIES) {
        console.warn(`429 quota, retrying in ${Math.round(delay/1000)}s‚Ä¶`);
        await sleep(delay);
        delay *= 2; // backoff: 10s ‚Üí 20s ‚Üí 40s
        continue;
      }

      console.error("Gemini error:", err);
      return fallback[Math.floor(Math.random() * fallback.length)];
    }
  }
}

// ===== Commands =====
bot.onText(/^\/start$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    "üåë ElleBot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏¥‡∏Å‡∏Å‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡∏•‡πâ‡∏ß‡∏ô\n/ask ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Äì ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ï‡∏≠‡∏ö\n/vibe ‚Äì ‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏£‡πå‡∏Å‡πÜ\n/ping ‚Äì ‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏µ‡∏û‡∏à‡∏£"
  );
});

bot.onText(/^\/vibe$/, (msg) => {
  const vibes = [
    "‡πÅ‡∏û‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡πÄ‡∏¢‡∏≠‡∏∞ üñ§",
    "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏î ‡∏Ñ‡∏°‡πÉ‡∏´‡πâ‡∏à‡∏≥ ‚öîÔ∏è",
    "‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤ üíµ",
    "‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à‡∏î‡∏¥ ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô üíã",
    "‡πÉ‡∏à‡πÅ‡∏Ç‡πá‡∏á ‡πÅ‡∏ï‡πà‡πÉ‡∏à‡∏ö‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ò‡∏≠ üòè",
  ];
  bot.sendMessage(msg.chat.id, vibes[Math.floor(Math.random() * vibes.length)]);
});

bot.onText(/^\/ping$/, (msg) => bot.sendMessage(msg.chat.id, "‡∏ï‡∏∑‡πà‡∏ô‡∏à‡πâ‡∏≤ ‚ö°"));

bot.onText(/^\/ask\s+([\s\S]+)$/i, async (msg, m) => {
  const q = (m && m[1])?.trim();
  if (!q) return bot.sendMessage(msg.chat.id, "‡∏û‡∏¥‡∏°‡∏û‡πå /ask ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏¥‡∏Ñ‡∏∞");
  const ans = await aiReply(q, msg.from.first_name);
  bot.sendMessage(msg.chat.id, `üñ§ ${ans}`);
});

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡πÉ‡∏ä‡πâ AI ‡πÑ‡∏ó‡∏¢‡∏Å‡∏ß‡∏ô‡πÜ
bot.on("message", async (msg) => {
  if (!msg.text || msg.text.startsWith("/")) return;
  const ans = await aiReply(msg.text, msg.from.first_name);
  bot.sendMessage(msg.chat.id, `üñ§ ${ans}`);
});

