// === ElleBot Office Persona (TH/VI) ===
// - ‡πÑ‡∏°‡πà crash ‡∏ñ‡πâ‡∏≤ ENV ‡∏´‡∏≤‡∏¢
// - Auto ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Webhook ‡∏ñ‡πâ‡∏≤ PUBLIC_URL ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ Polling
// - ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®: ‡πÄ‡∏£‡∏¥‡πà‡∏î ‡πÜ ‡∏ï‡∏•‡∏Å ‡πÜ ‡∏Å‡∏±‡∏î‡πÄ‡∏ö‡∏≤ ‡πÜ ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å
// - ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å Newton / Tyra / Dream / Jisak

const express = require("express");
const TelegramBot = require("node-telegram-bot-api");

const TOKEN = process.env.TELEGRAM_TOKEN || "";
const PUBLIC_URL = (process.env.PUBLIC_URL || "").replace(/\/+$/, "");
const PORT = process.env.PORT || 10000;

const app = express();
app.use(express.json());

// Health
app.get("/", (_, res) => {
  if (!TOKEN) {
    return res
      .status(200)
      .send("‚ùå Missing TELEGRAM_TOKEN ‚Äî ‡πÉ‡∏™‡πà ENV ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏•‡πâ‡∏ß Deploy ‡πÉ‡∏´‡∏°‡πà");
  }
  res
    .status(200)
    .send(
      `ElleBot (office persona) ‚úÖ mode=${PUBLIC_URL ? "webhook" : "polling"}`
    );
});

// ---------- Language helpers ----------
function isVI(s = "") {
  return /[ƒÉ√¢ƒë√™√¥∆°∆∞√°√†·∫£√£·∫°·∫•·∫ß·∫©·∫´·∫≠·∫Ø·∫±·∫≥·∫µ·∫∑√©√®·∫ª·∫Ω·∫π·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç·ªë·ªì·ªï·ªó·ªô·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµ]/i.test(
    s
  );
}
function pick(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// ---------- Persona replies ----------
const generalTH = [
  "üñ§ ‡∏á‡∏≤‡∏ô‡∏Å‡πá‡πÑ‡∏´‡∏• ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Å‡πá‡πÑ‡∏•‡πà ‡πÅ‡∏ï‡πà‡∏•‡∏¥‡∏õ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ß‡πâ‡∏à‡πâ‡∏∞",
  "üíÖ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÅ‡∏°‡πà‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÉ‡∏´‡πâ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏∞‡∏•‡∏π‡∏Å",
  "üåö ‡∏î‡∏≤‡∏£‡πå‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÅ‡∏ï‡πà‡πÉ‡∏à‡∏î‡∏µ‡∏ô‡∏∞‡∏à‡πä‡∏∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏≤‡∏´‡∏°‡∏¥‡πà‡∏ô‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ü‡∏≤‡∏î‡πÄ‡∏ö‡∏≤ ‡πÜ",
  "‚ú® ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πá‡∏û‡∏±‡∏Å ‡πÅ‡∏ï‡πà‡∏Ñ‡∏µ‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏•‡∏≠‡∏î‡∏à‡πâ‡∏∞",
  "üòé ‡πÄ‡∏î‡∏î‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏•‡πà‡∏ó‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏î‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏°‡∏≠",
];

const generalVI = [
  "üñ§ Cu·ªôc ƒë·ªùi h∆°i dark nh∆∞ng ch·ªã v·∫´n ch√≥i lo√° nha!",
  "üíÖ ƒê∆∞a file ƒë√∫ng folder r·ªìi ch·ªã x·ª≠ h·∫øt cho.",
  "üåö M·∫∑n v·ª´a ƒë·ªß, sang v·ª´a ƒë·∫πp, b·ªãch drama c≈©ng c√¢n ƒë∆∞·ª£c.",
  "‚ú® M·ªát th√¨ ngh·ªâ, c√≤n sang th√¨ ph·∫£i gi·ªØ.",
  "üòé Deadline d√≠ th√¨ c·ª© d√≠, c√≤n ch·ªã v·∫´n ƒë·∫πp.",
];

// ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡∏°/‡∏ß‡∏á‡πÉ‡∏ô
const people = {
  newton: {
    th: [
      "Newton ‡∏ô‡∏µ‡πà‡∏Å‡∏ß‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÄ‡∏´‡∏á‡∏≤‡πÅ‡∏´‡∏•‡∏∞ üòÇ",
      "‡∏ô‡∏¥‡∏ß‡∏ï‡∏±‡∏ô‡∏ô‡∏µ‡πà‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÄ‡∏¢‡∏≠‡∏∞‡∏î‡∏µ‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏à‡πâ‡∏≤",
      "‡πÄ‡∏à‡∏≠ Newton ‡∏ó‡∏µ‡πÑ‡∏£ ‡∏Æ‡∏≤‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡πâ‡∏≤ ‡∏á‡∏≤‡∏ô‡∏Å‡πá‡∏°‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏à‡πâ‡∏≤",
    ],
    vi: [
      "Newton ƒë√∫ng ki·ªÉu phi·ªÅn ph·ª©c nh∆∞ng thi·∫øu l√† bu·ªìn √°. üòÇ",
      "Newton √Ω t∆∞·ªüng nhi·ªÅu l·∫Øm, nh·ªõ ƒë·∫∑t t√™n file ƒë√†ng ho√†ng nghen.",
      "G·∫∑p Newton l√† c∆∞·ªùi, xong vi·ªác c≈©ng ƒë·ªï v·ªÅ ch·ªã lu√¥n nha.",
    ],
    keys: ["newton", "‡∏ô‡∏¥‡∏ß‡∏ï‡∏±‡∏ô"],
  },
  tyra: {
    th: [
      "Tyra ‡∏°‡∏≤‡∏≠‡∏ß‡∏¢‡∏≠‡∏µ‡∏Å‡∏•‡∏∞ ‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç‡πÅ‡∏ï‡πà‡∏Å‡πá‡∏ä‡∏≠‡∏ö‡∏ô‡∏∞ üòè",
      "‡∏ó‡∏µ‡∏£‡πà‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏™‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏î ‡πÅ‡∏ï‡πà‡∏á‡∏≤‡∏ô‡∏Å‡πá‡πÄ‡∏ô‡∏µ‡πä‡∏¢‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞‡πÄ‡∏ß‡πâ‡∏¢",
      "‡∏ñ‡πâ‡∏≤ Tyra ‡∏ß‡πà‡∏≤‡πÇ‡∏≠‡πÄ‡∏Ñ ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô gate ‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤",
    ],
    vi: [
      "Tyra l·∫°i khen n·ªØa r·ªìi, gi·∫£ t·∫°o d·ªÖ s·ª£ m√† ch·ªã th√≠ch nha üòè",
      "Tyra chu·∫©n ch·ªânh, ƒë·∫πp m√† l√†m vi·ªác c≈©ng g·ªçn.",
      "Tyra n√≥i OK l√† qua c·ªïng sang ch·∫£nh r·ªìi nha.",
    ],
    keys: ["tyra", "‡∏ó‡∏µ‡∏£‡πà‡∏≤"],
  },
  dream: {
    th: [
      "‡∏î‡∏£‡∏µ‡∏°‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏ä‡∏∏‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡πÉ‡∏à‡∏î‡∏µ‡πÄ‡∏™‡∏°‡∏≠ ü´∂",
      "Dream ‡∏°‡∏≤‡∏ó‡∏µ‡πÑ‡∏£ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏á‡∏ö‡∏™‡∏∏‡∏Ç‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ",
      "‡∏á‡∏≤‡∏ô‡∏ï‡∏¥‡∏î‡∏Å‡πá‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏£‡∏µ‡∏° ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ",
    ],
    vi: [
      "Dream d·ªÖ th∆∞∆°ng, h·ªó tr·ª£ m∆∞·ª£t nh∆∞ m∆° lu√¥n ü´∂",
      "C√≥ Dream l√† m·ªçi th·ª© √™m.",
      "K·∫πt ·ªü ƒë√¢u g·ªçi Dream m·ªôt ph√°t l√† xong.",
    ],
    keys: ["dream", "‡∏î‡∏£‡∏µ‡∏°"],
  },
  jisak: {
    th: [
      "‡∏à‡∏µ‡∏ã‡∏±‡∏Ñ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏ô‡∏∞ üò≥",
      "Jisak ‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÅ‡∏ï‡πà‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πä‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞",
      "‡∏à‡∏µ‡∏ã‡∏±‡∏Ñ‡∏™‡∏≤‡∏¢‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô ‡πÇ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏≤‡∏¢‡∏ï‡∏±‡∏ß üòÇ",
    ],
    vi: [
      "Jisak im l·∫∑ng ch·ª© √°nh m·∫Øt kh√¥ng im nha üò≥",
      "Jisak √≠t n√≥i m√† l√†m g·ªçn.",
      "Jisak th·∫£ file xong bi·∫øn m·∫•t nh∆∞ ninja üòÇ",
    ],
    keys: ["jisak", "‡∏à‡∏µ‡∏ã‡∏±‡∏Ñ", "‡∏à‡∏µ‡∏ã‡∏±‡∏Å"],
  },
};

// ‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏ñ‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢)
const intents = [
  {
    // ‡∏ó‡∏≥‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà / ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô / ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏´‡∏°
    test: /(‡∏ó‡∏≥‡πÑ‡∏£|‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£|‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏ô|‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå|on.?line)/i,
    th: [
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏ß‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ó‡∏≥‡∏á‡∏≤‡∏ô üòå",
      "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå‡∏à‡πâ‡∏∞ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏¢ ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏µ‡∏û‡∏•‡∏∏‡∏Ñ‡∏≠‡∏¢‡∏π‡πà",
      "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ò‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡πâ‡∏∞ üíÖ",
    ],
    vi: [
      "ƒêang b·∫≠n ƒë·∫πp, l√†m vi·ªác sau nha üòå",
      "ƒêang ·ªü timeline n√®, ƒë√¢u c√≥ m·∫•t.",
      "Online ch·ª©, nh∆∞ng ch·ªâ d√†nh cho em th√¥i üíÖ",
    ],
  },
  {
    // ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏¢‡∏±‡∏á
    test: /(‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß|‡∏Å‡∏¥‡∏ô‡∏¢‡∏±‡∏á|‡∏Å‡∏¥‡∏ô‡∏£‡∏∂‡∏¢‡∏±‡∏á)/i,
    th: [
      "‡∏Å‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏´‡∏¥‡∏ß‚Ä¶ ‡∏´‡∏¥‡∏ß‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô üòò",
      "‡∏¢‡∏±‡∏á‡πÄ‡∏•‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¥‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ü§≠",
    ],
    vi: [
      "ƒÇn r·ªìi, nh∆∞ng v·∫´n ƒë√≥i‚Ä¶ ƒë√≥i tƒÉng l∆∞∆°ng üòò",
      "Ch∆∞a, ƒëang ƒë√≥i t√¨nh √° ü§≠",
    ],
  },
  {
    // ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î
    test: /(‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢|‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î|‡∏ó‡πâ‡∏≠|‡∏°‡∏π‡∏ü‡∏≠‡∏≠‡∏ô|‡πÄ‡∏®‡∏£‡πâ‡∏≤)/i,
    th: [
      "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πá‡∏û‡∏±‡∏Å ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÑ‡∏ß‡πâ ‚ú®",
      "‡πÄ‡∏≠‡∏≤‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÅ‡∏°‡πà‡∏î‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á",
    ],
    vi: [
      "M·ªát th√¨ ngh·ªâ, c√≤n sang th√¨ ph·∫£i gi·ªØ ‚ú®",
      "C·ª© ƒë∆∞a vi·ªác ƒë√¢y, ch·ªã ƒë·∫©y l∆∞ng cho.",
    ],
  },
];

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function buildReply(text) {
  const vi = isVI(text);

  // ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡∏°
  const lower = text.toLowerCase();
  for (const k of Object.keys(people)) {
    const p = people[k];
    if (p.keys.some((kw) => lower.includes(kw))) {
      return vi ? pick(p.vi) : pick(p.th);
    }
  }

  // intents ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  for (const i of intents) {
    if (i.test.test(text)) {
      return vi ? pick(i.vi) : pick(i.th);
    }
  }

  // default
  return vi ? pick(generalVI) : pick(generalTH);
}

// ---------- Boot ----------
let bot = null;

async function startWebhook() {
  bot = new TelegramBot(TOKEN, { polling: false });
  app.post(`/webhook/${TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });
  const url = `${PUBLIC_URL}/webhook/${TOKEN}`;
  let delay = 3000;
  for (let i = 1; i <= 5; i++) {
    try {
      await bot.setWebHook(url);
      console.log("‚úÖ Webhook set:", url);
      return;
    } catch (e) {
      console.warn(`setWebHook attempt ${i} failed:`, e?.message || e);
      await new Promise((r) => setTimeout(r, delay));
      delay *= 2;
    }
  }
  console.error("‚ùå ‡∏ï‡∏±‡πâ‡∏á webhook ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ)");
}

async function startPolling() {
  try {
    const fetch = (await import("node-fetch")).default;
    await fetch(`https://api.telegram.org/bot${TOKEN}/deleteWebhook`);
  } catch (_) {}
  bot = new TelegramBot(TOKEN, { polling: true });
  console.log("‚úÖ Polling started");
}

function attachHandlers() {
  if (!bot) return;

  bot.onText(/^\/start$/, (msg) => {
    bot.sendMessage(
      msg.chat.id,
      "ElleBot (office) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡πâ‡∏≤ üíÖ\n‡πÑ‡∏ó‡∏¢-‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏ß‡∏ô‡πÑ‡∏î‡πâ ‡∏î‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏ö‡∏≤ ‡πÜ ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ üñ§"
    );
  });

  bot.on("message", (msg) => {
    const text = (msg.text || "").trim();
    if (!text) return;
    const reply = buildReply(text);
    bot.sendMessage(msg.chat.id, reply);
  });
}

app.listen(PORT, async () => {
  console.log(`HTTP on ${PORT}`);
  if (!TOKEN) {
    console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ TELEGRAM_TOKEN ‚Äî ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤ health");
    return;
  }
  try {
    if (PUBLIC_URL) {
      console.log("Boot in WEBHOOK mode");
      await startWebhook();
    } else {
      console.log("Boot in POLLING mode");
      await startPolling();
    }
    attachHandlers();
  } catch (e) {
    console.error("Boot error (‡πÑ‡∏°‡πà‡∏•‡πâ‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™):", e?.message || e);
  }
});

