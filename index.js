// === ElleBot x Gemini ‚Äî Thai / Isan, short & sassy + quota-safe ===
const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// ===== ENV =====
const token = process.env.TELEGRAM_TOKEN;
const geminiKey = process.env.GEMINI_API_KEY;
if (!token) { console.error("‚ùå Missing TELEGRAM_TOKEN"); process.exit(1); }
if (!geminiKey) { console.error("‚ùå Missing GEMINI_API_KEY"); process.exit(1); }

// ===== Web server for Render health =====
const app = express();
const PORT = process.env.PORT || 10000;
app.get("/", (_, res) => res.send("ElleBot is live üñ§"));
app.listen(PORT, () => console.log(`HTTP server on ${PORT}`));

// ===== Telegram + Gemini =====
const bot = new TelegramBot(token, { polling: true });
const genAI = new GoogleGenerativeAI(geminiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// ===== Mode switch =====
let modeIsan = true; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏µ‡∏™‡∏≤‡∏ô

// ===== Rate-limit & Retry (‡∏Å‡∏±‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤) =====
const RATE_LIMIT_MS = 1500; // ‡πÄ‡∏ß‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1.5s ‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥‡∏Ç‡∏≠
let lastCallAt = 0;
const sleep = (ms) => new Promise(r => setTimeout(r, ms));
async function withRateLimit() {
  const now = Date.now();
  const wait = Math.max(0, RATE_LIMIT_MS - (now - lastCallAt));
  if (wait > 0) await sleep(wait);
  lastCallAt = Date.now();
}

// ===== Persona prompt =====
function buildPrompt(userText, name) {
  const personaCommon = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "ElleBot" ‡πÇ‡∏ó‡∏ô‡∏î‡∏≤‡∏£‡πå‡∏Å ‡∏Å‡∏ß‡∏ô ‡∏ï‡∏•‡∏Å ‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™ üñ§
‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤:
- ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î/‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°/‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡πÅ‡∏£‡∏á
- ‡πÅ‡∏ã‡∏ß‡πÑ‡∏î‡πâ ‡∏î‡∏≤‡∏£‡πå‡∏Å‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
- ‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
`;

  const personaIsan = `
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏µ‡∏™‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏î‡πâ‡∏≠", "‡∏à‡∏±‡πà‡∏á‡πÑ‡∏î‡πã", "‡∏Ñ‡∏±‡∏Å‡πÅ‡∏ó‡πâ"
- ‡πÇ‡∏ó‡∏ô‡∏Å‡∏ß‡∏ô ‡πÜ ‡∏Ç‡∏≥ ‡πÜ ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏û‡∏á ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏ï‡∏ô‡∏¥‡∏î ‡πÜ
- ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏û‡∏≠‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏≠‡∏î‡∏°‡∏∏‡∏Å‡∏≠‡∏µ‡∏™‡∏≤‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
`;

  const personaThai = `
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÇ‡∏ó‡∏ô‡∏Å‡∏ß‡∏ô ‡πÜ ‡πÄ‡∏ó‡πà ‡πÜ
`;

  const persona = modeIsan ? personaCommon + personaIsan : personaCommon + personaThai;

  return `
${persona}
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${name || "‡πÄ‡∏û‡∏¥‡πà‡∏ô"}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${userText}
‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÄ‡∏•‡∏¢:`;
}

// ===== Gemini call with retry/backoff when 429 =====
async function aiReply(text, name) {
  const fallback = [
    "‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ô‡πà‡∏ô‡πÅ‡∏´‡∏ô‡πà‡πÄ‡∏î‡πâ‡∏≠ ‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏î‡πâ‡∏≠ üñ§",
    "‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏î‡πâ‡∏≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà üòå",
    "‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏Å ‡πÜ ‡πÄ‡∏î‡πâ‡∏≠ üòâ"
  ];

  const MAX_RETRIES = 3;
  let delay = 10_000; // 10s ‚Üí 20s ‚Üí 40s

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      await withRateLimit();
      const result = await model.generateContent(buildPrompt(text, name));
      let out = (result.response.text() || "").trim();
      if (!out) out = "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÄ‡∏Æ‡πá‡∏î‡∏´‡∏¢‡∏±‡∏á‡∏•‡πà‡∏∞ ‡∏Å‡∏•‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÇ‡∏•‡∏î üòâ";
      if (out.length > 140) out = out.slice(0, 140) + "‚Ä¶";
      if (/[a-zA-Z]{3,}/.test(out)) out = modeIsan ? "‡πÄ‡∏ß‡πâ‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏µ‡∏™‡∏≤‡∏ô‡πÄ‡∏î‡πâ‡∏≠ ‡∏ö‡πà‡πÅ‡∏õ‡∏•‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏î‡πâ‡∏≠ üòå" : "‡∏Ç‡∏≠‡πÑ‡∏ó‡∏¢‡∏•‡πâ‡∏ß‡∏ô ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ô‡∏∞ üòå";
      return out;
    } catch (err) {
      const msg = String(err?.message || err);
      const is429 = msg.includes("429")
        || msg.toLowerCase().includes("quota")
        || msg.toLowerCase().includes("too many requests");
      if (is429 && attempt < MAX_RETRIES) {
        console.warn(`429 quota, retry in ${Math.round(delay/1000)}s‚Ä¶`);
        await sleep(delay);
        delay *= 2;
        continue;
      }
      console.error("Gemini error:", err);
      return fallback[Math.floor(Math.random() * fallback.length)];
    }
  }
}

// ===== Commands =====
bot.onText(/^\/start$/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    "üåë ElleBot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏¥‡∏Å‡∏Å‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πâ‡∏≠\n/ask ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Äì ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÇ‡∏•‡∏î\n/vibe ‚Äì ‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏£‡πå‡∏Å‡πÜ\n/isan on|off ‚Äì ‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏µ‡∏™‡∏≤‡∏ô\n/ping ‚Äì ‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏µ‡∏û‡∏à‡∏£"
  );
});

bot.onText(/^\/vibe$/, (msg) => {
  const vibes = modeIsan
    ? [
        "‡πÅ‡∏û‡∏á‡πÅ‡∏ï‡πà‡∏ö‡πà‡πÄ‡∏ß‡πâ‡∏≤ ‡∏´‡∏•‡πà‡∏≠‡∏ö‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® üñ§",
        "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏î ‡∏Ñ‡∏°‡πÉ‡∏´‡πâ‡∏à‡∏≥ ‡πÄ‡∏î‡πâ‡∏≠ ‚öîÔ∏è",
        "‡∏ö‡πà‡∏£‡∏±‡∏ö‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤ ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏î‡πâ‡∏≠ üíµ",
        "‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à‡∏ö‡πà ‡∏°‡∏µ‡∏ö‡πà ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡πâ‡∏≠ üíã",
        "‡πÉ‡∏à‡πÅ‡∏Ç‡πá‡∏á ‡πÅ‡∏ï‡πà‡πÉ‡∏à‡∏ö‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤ üòè",
      ]
    : [
        "‡πÅ‡∏û‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡πÄ‡∏¢‡∏≠‡∏∞ üñ§",
        "‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏î ‡∏Ñ‡∏°‡πÉ‡∏´‡πâ‡∏à‡∏≥ ‚öîÔ∏è",
        "‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏î‡∏£‡∏≤‡∏°‡πà‡∏≤ ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î üíµ",
        "‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô üíã",
        "‡πÉ‡∏à‡πÅ‡∏Ç‡πá‡∏á ‡πÅ‡∏ï‡πà‡πÉ‡∏à‡∏ö‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ò‡∏≠ üòè",
      ];
  bot.sendMessage(msg.chat.id, vibes[Math.floor(Math.random() * vibes.length)]);
});

bot.onText(/^\/ping$/, (msg) => bot.sendMessage(msg.chat.id, "‡∏ï‡∏∑‡πà‡∏ô‡∏à‡πâ‡∏≤ ‚ö°"));

bot.onText(/^\/isan\s+(on|off)$/i, (msg, m) => {
  modeIsan = (m[1].toLowerCase() === "on");
  bot.sendMessage(msg.chat.id, modeIsan ? "‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏µ‡∏™‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πâ‡∏≠ ü§ü" : "‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏µ‡∏™‡∏≤‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏ó‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤");
});

bot.onText(/^\/ask\s+([\s\S]+)$/i, async (msg, m) => {
  const q = (m && m[1])?.trim();
  if (!q) return bot.sendMessage(msg.chat.id, modeIsan ? "‡∏û‡∏¥‡∏°‡∏û‡πå /ask ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏•‡∏î‡πÄ‡∏î‡πâ‡∏≠" : "‡∏û‡∏¥‡∏°‡∏û‡πå /ask ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏∞");
  const ans = await aiReply(q, msg.from.first_name);
  bot.sendMessage(msg.chat.id, `üñ§ ${ans}`);
});

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
bot.on("message", async (msg) => {
  if (!msg.text || msg.text.startsWith("/")) return;
  const ans = await aiReply(msg.text, msg.from.first_name);
  bot.sendMessage(msg.chat.id, `üñ§ ${ans}`);
});


